import { envConstructorOptions } from "./types";
interface tenvInterface {
    loadDefaults(filePath: string): Promise<void>;
    getString(name: string, defaultValue: string): string;
    getInt(name: string, defaultValue: number): number;
    getFloat(name: string, defaultValue: number): number;
    getArray(name: string, defaultValue: any[]): any[];
    getBoolean(name: string, defaultValue: boolean): boolean;
}
export default class tenv implements tenvInterface {
    private prefixSeparate;
    private prefix;
    private defaults;
    private throwOnError;
    constructor(options?: envConstructorOptions);
    private getEnvironmentVariable;
    private getTypedEnvironmenVariable;
    private baseError;
    private typeConersionError;
    private moduleNotFoundError;
    private moduleStructureWrongError;
    private moduleEmptyError;
    loadDefaults(filePath: string): Promise<void>;
    /**
     * returns a string
     * @param name Defines the environment variable to fetch
     * @param defaultValue Defines the fallback value in case the requested variable is not found in the defaults nor the environment
     */
    getString(name: string, defaultValue?: string): string;
    /**
     * returns a boolean
     * True values are one of `true` "true", "yes", "1" and 'on'
     * False values are one of `false` "false", "no", "0", 'off'
     * @param name Defines the environment variable to fetch
     * @param defaultValue Defines the fallback value in case the requested variable is not found in the defaults nor the environment
     */
    getBoolean(name: string, defaultValue?: boolean): boolean;
    /**
     * Returns an integer
     * @param name Defines the environment variable to fetch
     * @param defaultValue Defines the fallback value in case the requested variable is not found in the defaults nor the environment
     */
    getInt(name: string, defaultValue?: number): number;
    /**
     *
     * @param name Defines the environment variable to fetch
     * @param defaultValue Defines the fallback value in case the requested variable is not found in the defaults nor the environment
     */
    getIntOrAny(name: string, defaultValue?: number): number | any;
    /**
     * Returns a float
     * @param name Defines the environment variable to fetch
     * @param defaultValue Defines the fallback value in case the requested variable is not found in the defaults nor the environment
     */
    getFloat(name: string, defaultValue?: number): number;
    /**
     * Returns an array. I can parse a `JSON`` back to an array or it splits a string at a `,`
     * @param name Defines the environment variable to fetch
     * @param defaultValue Defines the fallback value in case the requested variable is not found in the defaults nor the environment
     */
    getArray(name: string, defaultValue?: any[]): any[];
    /**
     * Will prevent tenv to throw errors
     */
    quiet(): void;
}
export {};
