"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
class tenv {
    constructor(options) {
        this.prefixSeparate = "_";
        this.prefix = "";
        this.defaults = {};
        this.throwOnError = true;
        if (!options)
            return;
        for (let option in options) {
            this[option] = options[option];
        }
    }
    getEnvironmentVariable(name) {
        const prefix = `${this.prefix}${this.prefixSeparate}`;
        if (prefix !== this.prefixSeparate) {
            name = `${prefix}${name}`;
        }
        if (this.defaults[name]) {
            return this.defaults[name];
        }
        if (process.env[name] !== undefined) {
            return process.env[name];
        }
        return null;
    }
    getTypedEnvironmenVariable(name, defaultValue, type) {
        let variable = this.getEnvironmentVariable(name);
        if (!variable) {
            variable = defaultValue;
        }
        if (!variable) {
            return null;
        }
        let parsed;
        switch (type) {
            case "string":
                return String(variable);
            case "int":
                parsed = parseInt(variable);
                if (isNaN(parsed))
                    return this.typeConersionError();
                break;
            case "boolean":
                if (["true", "yes", "y", "1", "on"].includes(variable)) {
                    parsed = true;
                }
                if (["false", "no", "n", "0", "off"].includes(variable)) {
                    parsed = false;
                }
                if (isNaN(parsed))
                    return this.typeConersionError();
                break;
            case "float":
                parsed = parseFloat(variable);
                if (isNaN(parsed))
                    return this.typeConersionError();
                break;
            case "array":
                if (Array.isArray(variable)) {
                    parsed = variable;
                }
                else {
                    try {
                        parsed = JSON.parse(variable);
                    }
                    catch (e) {
                        parsed = variable.split(",");
                    }
                }
                break;
        }
        return parsed;
    }
    baseError(error) {
        if (!this.throwOnError)
            return undefined;
        throw new Error(error);
    }
    typeConersionError() {
        this.baseError("Cannot convert types error");
    }
    moduleNotFoundError() {
        this.baseError("Cannot find Module");
    }
    moduleStructureWrongError() {
        this.baseError("Module Structure wrong");
    }
    moduleEmptyError() {
        this.baseError("Module has no Keys");
    }
    async loadDefaults(filePath) {
        let defaults;
        try {
            defaults = await Promise.resolve().then(() => __importStar(require(filePath)));
        }
        catch (e) {
            return this.moduleNotFoundError();
        }
        if (!defaults.hasOwnProperty("defaults")) {
            return this.moduleStructureWrongError();
        }
        if (Object.keys(defaults.defaults).length === 0) {
            return this.moduleEmptyError();
        }
        this.defaults = defaults.defaults;
    }
    /**
     * returns a string
     * @param name Defines the environment variable to fetch
     * @param defaultValue Defines the fallback value in case the requested variable is not found in the defaults nor the environment
     */
    getString(name, defaultValue) {
        return this.getTypedEnvironmenVariable(name, defaultValue, "string");
    }
    /**
     * returns a boolean
     * True values are one of `true` "true", "yes", "1" and 'on'
     * False values are one of `false` "false", "no", "0", 'off'
     * @param name Defines the environment variable to fetch
     * @param defaultValue Defines the fallback value in case the requested variable is not found in the defaults nor the environment
     */
    getBoolean(name, defaultValue) {
        return this.getTypedEnvironmenVariable(name, defaultValue, "boolean");
    }
    /**
     * Returns an integer
     * @param name Defines the environment variable to fetch
     * @param defaultValue Defines the fallback value in case the requested variable is not found in the defaults nor the environment
     */
    getInt(name, defaultValue) {
        return this.getTypedEnvironmenVariable(name, defaultValue, "int");
    }
    /**
     *
     * @param name Defines the environment variable to fetch
     * @param defaultValue Defines the fallback value in case the requested variable is not found in the defaults nor the environment
     */
    getIntOrAny(name, defaultValue) {
        return this.getTypedEnvironmenVariable(name, defaultValue, "int");
    }
    /**
     * Returns a float
     * @param name Defines the environment variable to fetch
     * @param defaultValue Defines the fallback value in case the requested variable is not found in the defaults nor the environment
     */
    getFloat(name, defaultValue) {
        return this.getTypedEnvironmenVariable(name, defaultValue, "float");
    }
    /**
     * Returns an array. I can parse a `JSON`` back to an array or it splits a string at a `,`
     * @param name Defines the environment variable to fetch
     * @param defaultValue Defines the fallback value in case the requested variable is not found in the defaults nor the environment
     */
    getArray(name, defaultValue) {
        return this.getTypedEnvironmenVariable(name, defaultValue, "array");
    }
    /**
     * Will prevent tenv to throw errors
     */
    quiet() {
        this.throwOnError = false;
    }
}
exports.default = tenv;
//# sourceMappingURL=index.js.map